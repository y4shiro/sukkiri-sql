use intro_sql;

SELECT * FROM 口座;
SELECT * FROM 廃止口座;
SELECT * FROM 取引;
SELECT * FROM 取引事由;

# 第 2 章 基本文法と四大命令
# 1. 口座テーブルの全データを * を用いずに抽出
SELECT 口座番号, 名義, 種別, 残高, 更新日 FROM 口座;
# 2. 口座テーブルの全ての口座番号を抽出する
SELECT 口座番号 FROM 口座;
# 3. 口座テーブルの全ての口座番号と残高を抽出する
SELECT 口座番号, 残高 FROM 口座;
# 4. 口座テーブルの全てのデータを * を用いて抽出する
SELECT * FROM 口座;
# 5. 口座テーブルの全ての名義を "XXXXX" に更新する
UPDATE 口座
   SET 名義 = 'XXXXX';
# 6. 口座テーブルの全ての残高を 99999999、更新日を 2022-03-01 に更新
UPDATE 口座
   SET 残高 = 99999999, 更新日 = '2022-03-01';
# 7. 口座テーブルに次の 3 つのデータを 1 回の実行ごとに 1 つづつ登録する
INSERT INTO 口座 (口座番号, 名義, 種別, 残高, 更新日)
     VALUES ('0642191', 'アオキ　ハルカ', '1', 3640551, '2022-03-13');
INSERT INTO 口座 (口座番号, 名義, 種別, 残高, 更新日)
     VALUES ('1039410', 'キノシタ　リュウジ', '1', 259017, '2021-11-30');
INSERT INTO 口座 (口座番号, 名義, 種別, 残高)
     VALUES ('1239855', 'タカシナ　ミツル', '2', 6509773);
# 8. 口座テーブルの全てのデータを削除する
DELETE FROM 口座;

# 第 3 章 操作する行の絞り込み
# 9. 口座テーブルから、口座番号が '0037651' のデータを抽出する
SELECT *
  FROM 口座
 WHERE 口座番号 = '0037651';
# 10. 口座テーブルから、残高が 0 より大きいデータを抽出する
SELECT *
  FROM 口座
 WHERE 残高 > 0;
# 11. 口座テーブルから、口座番号が 1000000 番より前のデータを抽出する
SELECT *
  FROM 口座
 WHERE 口座番号 < 1000000;
# 12. 口座テーブルから、更新日が 2021 年以前のデータを抽出する
SELECT *
  FROM 口座
 WHERE 更新日 < '2022-01-01';
# 13. 口座テーブルから、残高が 100 万円以上のデータを抽出する
SELECT *
  FROM 口座
 WHERE 残高 >= 1000000;
# 14. 口座テーブルから、種別が '普通' ではないデータを抽出する
SELECT *
  FROM 口座
 WHERE 種別 <> '1';
# 15. 口座テーブルから、更新日が登録されていないデータを抽出する
SELECT *
  FROM 口座
 WHERE 更新日 IS NULL;
# 16. 口座テーブルから、'ハシ' を含む名義のデータを抽出する
SELECT *
  FROM 口座
 WHERE 名義 LIKE '%ハシ%';
# 17. 口座テーブルから、更新日が 2022/01 の日付であるデータを抽出する。ただし、記述する条件式は 1 つであること
SELECT *
  FROM 口座
 WHERE 更新日 BETWEEN '2022-01-01' AND '2022-01-31';
# 18. 口座テーブルから、種別が '当座' または '別段' のデータを抽出する。ただし、記述する条件式は 1 つであること
SELECT *
  FROM 口座
 WHERE 種別 IN ('2', '3');
# 19. 口座テーブルから、名義が 'サカタ　リョウヘイ' / 'マツモト　ミワコ' / 'ハマダ　サトシ' のデータを抽出する
SELECT *
  FROM 口座
 WHERE 名義 IN ('サカタ　リョウヘイ', 'マツモト　ミワコ', 'ハマダ　サトシ');
# 20. 口座テーブルから、更新日が 2021-12-30 から 2022-01-04 であるデータを抽出する
SELECT *
  FROM 口座
 WHERE 更新日 >='2021-12-30' AND 更新日 <= '2022-01-04';
# 21. 口座テーブルから、残高が 1 万円未満で、更新日が登録されているデータを抽出する
SELECT *
  FROM 口座
 WHERE 残高 < 10000 AND 更新日 IS NOT NULL;
# 22. 口座テーブルから、次の条件のいずれかに当てはまるデータを抽出する
# - 口座番号が 2000000 番台
# - 名義の姓が 'エ' から始まる 3 文字で、名前が 'コ' で終わる
SELECT *
  FROM 口座
 WHERE 口座番号 LIKE '2______'
    OR 名義 LIKE 'エ__　%コ';

# 第 4 章 検索結果の加工
# 24. 口座テーブルから、口座番号順に全てのデータを抽出する。ただし、並び替えには列名を指定し、昇順にすること
SELECT 口座番号, 名義, 種別, 残高, 更新日
  FROM 口座
 ORDER BY 口座番号;
# 25. 口座テーブルから、名義の一覧を取得する。データの重複を除外し、名義の昇順にすること
SELECT DISTINCT 名義
  FROM 口座
 ORDER BY 名義;
# 26. 口座テーブルから、残高の大きい順にすべてのデータを抽出する。残高が同額の場合には口座番号の昇順にし、並び替えには列番号を指定すること
SELECT 口座番号, 名義, 種別, 残高, 更新日
  FROM 口座
 ORDER BY 4 DESC, 1;
# 27. 口座テーブルから、更新日を過去の日付順に 10 件抽出する。ただし、更新日の設定が無いデータは除くこと
SELECT 更新日
  FROM 口座
 WHERE 更新日 IS NOT NULL
 ORDER BY 更新日
 LIMIT 10;
# MySQL 以外で OFFSET を使った場合
SELECT 更新日
  FROM 口座
 WHERE 更新日 IS NOT NULL
 ORDER BY 更新日
 OFFSET 0 FETCH FIRST 10 ROWS ONLY;
# 28. 口座テーブルから、更新日と残高を、残高の小さい順に 11 ~ 20 件のみを抽出する。
# ただし、残高が 0 円または更新日の設定がないデータは除外し、残高が同額の場合には更新日の新しい順(降順)とする
SELECT 更新日, 残高
  FROM 口座
 WHERE 残高 > 0 AND 更新日 IS NOT NULL
 ORDER BY 残高, 更新日 DESC
 LIMIT 10 OFFSET 10;
# 29. 口座テーブルと廃止口座テーブルに登録されている口座番号を昇順に抽出する
SELECT 口座番号 FROM 口座
 UNION
SELECT 口座番号 FROM 廃止口座
 ORDER BY 口座番号;
# 30. 口座番号に登録されている名義のうち、廃止口座テーブルには存在しない名義を抽出する。重複データは除き、降順で並べる
SELECT DISTINCT 名義 FROM 口座;
SELECT DISTINCT 名義 FROM 廃止口座;
# PostgreSQL の場合
SELECT 名義 FROM 口座
EXCEPT
SELECT 名義 FROM 廃止口座
 ORDER BY 1 DESC;
# MySQL で NOT IN を使用した場合
SELECT DISTINCT 名義 FROM 口座
WHERE 名義 NOT IN (
  SELECT DISTINCT 名義
    FROM 廃止口座
)
ORDER BY 名義 DESC;
# MySQL で LEFT JOIN + IS NULL を使用した場合
SELECT DISTINCT 口座.名義
  FROM 口座
  LEFT JOIN 廃止口座
    ON 口座.名義 = 廃止口座.名義
 WHERE 廃止口座.名義 IS NULL
 ORDER BY 口座.名義 DESC;

# 31. 口座テーブルと廃止口座テーブルの両方に登録されている名義を昇順に抽出する
# PostgreSQL などの場合
   SELECT 名義 FROM 口座
INTERSECT
   SELECT 名義 FROM 廃止口座
    ORDER BY 1;
# MySQL で INNER JOIN を利用した場合
SELECT 口座.名義 FROM 口座
 INNER JOIN 廃止口座
    ON 口座.名義 = 廃止口座.名義
 ORDER BY 口座.名義;
# 32. 口座テーブルと廃止口座テーブルに登録されている口座番号と残高の一覧を取得する
# ただし、口座テーブルは残高が 0 のもの、廃止口座テーブルは解約時残高が 0 ではないものを抽出の対象とする。一覧は口座番号順とする
SELECT 口座番号, 残高 FROM 口座
 WHERE 残高 = 0
UNION
SELECT 口座番号, 解約時残高 FROM 廃止口座
 WHERE 解約時残高 <> 0
 ORDER BY 1;

# 第 5 章 式と関数
# 33. 口座テーブルと廃止口座テーブルに登録されている口座番号と名義の一覧を取得する
# 一覧は名義の昇順にし、その口座の状況がわかるように、有効な口座には '○' を、廃止した口座には 'X' を一覧に付記する
SELECT 口座番号, 名義, '○' AS 口座区分 FROM 口座
 UNION
SELECT 口座番号, 名義, 'x' AS 口座区分 FROM 廃止口座
 ORDER BY 名義;
# 34. 口座テーブルから、残高が 100 万円以上の口座番号と残高を抽出する
# ただし、残高は千円単位で表記し、見出しを '千円単位の残高' とする
SELECT 口座番号, (残高 / 1000) AS 千円単位の残高
  FROM 口座
 WHERE 残高 >= 1000000;
# 35. 口座テーブルに 3 つのデータを 1 回の実行ごとに 1 つづつ登録する。ただし、キャンペーンにより登録時に残高を 3,000 円プラスする
INSERT INTO 口座 (口座番号, 名義, 種別, 残高, 更新日)
       VALUES ('0652281', 'タカギ　ノブオ', '1', 100000 + 3000, '2022-04-01');
INSERT INTO 口座 (口座番号, 名義, 種別, 残高, 更新日)
       VALUES ('1026413', 'マツモト　サワコ', '1', 300000 + 3000, '2022-04-02');
INSERT INTO 口座 (口座番号, 名義, 種別, 残高, 更新日)
       VALUES ('2239710', 'ササキ　シゲノリ', '1', 1000000 + 3000, '2022-04-03');
# 36. 35 の問題で登録したデータについて、キャンペーン価格が間違っていた事が判明した
# 該当するデータの残高から 3000 円を差し引き、改めて残高の 0.3 % を上乗せした金額に更新する
UPDATE 口座
   SET 残高 = (残高 - 3000) * 1.003
 WHERE 口座番号 IN ('0652281', '1026413', '2239710');
# 37. 口座テーブルから、更新日が 2020 年以前のデータを対象に、口座番号、更新日、通帳期限日を抽出する
# 通帳期限日は、更新日の 180 日後とする
# PostgreSQL の場合
SELECT 口座番号, 更新日, 更新日 + 180 AS 通帳期限日
  FROM 口座
 WHERE 更新日 <= '2020-12-31';
# MySQL の場合
SELECT 口座番号, 更新日, DATE_ADD(更新日, INTERVAL 180 DAY) AS 通帳期限日
  FROM 口座
 WHERE 更新日 <= '2020-12-31';
# 38. 口座テーブルから、種別が '別段' のデータについて、口座番号と名義を抽出する
# ただし、名義の前に 'カ）' を付記すること
SET sql_mode='PIPES_AS_CONCAT';
SELECT 口座番号, 'カ）' || 名義 AS 名義 FROM 口座
 WHERE 種別 = '3';
# 39. 口座テーブルから、登録されている種別の一覧を取得する。
# 見出しは '種別コード' と '種別名' とし、種別名には日本語名を表記する
SELECT DISTINCT 種別 AS 種別コード,
  CASE
    WHEN 種別 = '1' THEN '普通'
    WHEN 種別 = '2' THEN '当座'
    WHEN 種別 = '3' THEN '別段'
  END AS 種別名
  FROM 口座;
# 40. 口座テーブルから、口座番号、名義、残高ランクを抽出する。
# 残高ランクは、残高が 10 万円未満を 'C'、10 万以上 100 万未満を 'B'、それ以外を 'A' とする
SELECT 口座番号, 名義,
  CASE
    WHEN 残高 < 100000 THEN 'C'
    WHEN 残高 >= 100000 AND 残高 < 1000000 THEN 'B'
    ELSE 'A'
   END AS 残高ランク
FROM 口座;
# 41. 口座テーブルから、口座番号、名義、残高の文字数を抽出する。
# ただし、名義の姓名の間の全角スペースは除外すること
SELECT LENGTH(口座番号), LENGTH(REPLACE(名義, '　', '')), LENGTH(CAST(残高 AS CHAR)) FROM 口座;
# 42. 口座テーブルから、名義の 1 ~ 5 文字目に 'カワ' が含まれるデータを抽出する
SELECT *
  FROM 口座
 WHERE SUBSTRING(名義, 1, 5) LIKE '%カワ%';
# 43. 口座テーブルから、残高の桁数が 4 桁以上で、1,000 円未満の端数が無いデータを抽出する
# ただし、どちらの条件も文字数を求める関数を使って判定すること
SELECT *
  FROM 口座
 WHERE LENGTH(CAST(残高 AS CHAR)) >= 4
   AND SUBSTRING(CAST(残高 AS CHAR), LENGTH(CAST(残高 AS CHAR)) - 2, 3) = '000';
# 44. 口座テーブルから、口座番号、残高、利息を残高の降順に抽出する
# 利息は、残高に普通預金利息 0.02 % を描けて求め、1 円未満は切り捨てる
SELECT 口座番号, 残高,
  TRUNCATE(残高 * 0.0002, 0) AS 利息
  FROM 口座
 ORDER BY 残高 DESC;
# 45. 口座テーブルから、口座番号、残高、残高別利息を抽出する
# 残高別利息は、50 万円未満は 0.01 %、50 万以上 200 万未満を 0.02 %、200 万以上を 0.03 % として計算し、1円未満切り捨て
# 一覧は、残高別利息の降順、口座番号の昇順に並べる
SELECT 口座番号, 残高,
  CASE
    WHEN 残高 < 500000 THEN TRUNCATE(残高 * 0.0001, 0)
    WHEN 残高 >= 500000 AND 残高 < 2000000 THEN TRUNCATE(残高 * 0.0002, 0)
    WHEN 残高 > 2000000 THEN TRUNCATE(残高 * 0.0003, 0)
  END AS 残高別利息
  FROM 口座
 ORDER BY 残高別利息 DESC, 口座番号;
# 46. 口座テーブルに 3 つのデータを登録する
# ただし、更新日は現在の日付を求める関数を利用する
INSERT INTO 口座(口座番号, 名義, 種別, 残高, 更新日)
VALUES ('0351262', 'イトカワ　ダイ', '2', 635110, CURDATE());
INSERT INTO 口座(口座番号, 名義, 種別, 残高, 更新日)
VALUES ('1015513', 'アキツ　ジュンジ', '1', 88463, CURDATE());
INSERT INTO 口座(口座番号, 名義, 種別, 残高, 更新日)
VALUES ('1739298', 'ホシノ　サトミ', '1', 704610, CURDATE());
# 47. 口座テーブルから更新日が 2022 年以降のデータを抽出する
# その際、更新日は '2022年01月01日' のような形で抽出する
SELECT 口座番号, 名義, 種別, 残高, date_format(更新日, '%Y年%m月%d日') AS 更新日
  FROM 口座
 WHERE 更新日 > '2021-12-31';
# 48. 口座テーブルから更新日を抽出する。更新日が登録されていない場合は '設定無し' と表記する
SELECT COALESCE(CAST(更新日 AS CHAR), '設定無し') AS 更新日
  FROM 口座;

# 第 6 章 集計とグループ化
# 49. 口座テーブルから、残高の合計、最大、最小、平均、登録データ件数を求める
SELECT SUM(残高), MAX(残高), MIN(残高), AVG(残高), COUNT(*)
  FROM 口座;
# 50. 口座テーブルから、種別が '普通' 以外、残高が 100 万円以上、更新日が 2021 年以前のデータ件数を求める
SELECT COUNT(*) AS 件数
  FROM 口座
 WHERE 種別 <> '1'
   AND 残高 >= 1000000
   AND 更新日 <= '2021-12-31';
# 51. 口座テーブルから、更新日が登録されていないデータ件数を求める。ただし、条件式は用いない
SELECT COUNT(*) - COUNT(更新日) AS 更新日未登録なデータの件数
  FROM 口座;
# 52. 口座テーブルから、名義の最大値と最小値を求める
SELECT MAX(名義), MIN(名義)
  FROM 口座;
# 53. 口座テーブルから、最新更新日と最古更新日を求める
SELECT MAX(更新日), MIN(更新日) FROM 口座;
# 54. 口座テーブルから、種別ごとの残高の合計、最大、最小、平均、および登録されているデータ件数を求める
SELECT 種別, SUM(残高) AS 合計, MAX(残高) AS 最大, MIN(残高) AS 最小, AVG(残高) AS 平均, COUNT(種別) AS 件数
  FROM 口座
 GROUP BY 種別;
# 55. 口座テーブルから、口座番号の下 1 桁目が同じ数字であるものを同じグループとし、それぞれのデータ件数を求める。
# ただし、件数の多い順に並べること
SELECT SUBSTRING(口座番号, 7, 1) AS 口座番号グループ, COUNT(*) AS 件数
  FROM 口座
 GROUP BY SUBSTRING(口座番号, 7, 1)
 ORDER BY 件数 DESC;
# 56. 口座テーブルから、更新日の年ごとの残高の合計、最大、最小、平均、登録データ件数を求める
# ただし、更新日の登録が無いデータは、'XXXX年' として集計する
SELECT SUBSTRING(COALESCE(更新日, 'XXXX'), 1, 4) AS 年,
       MAX(残高) AS 残高の最大値, MIN(残高) AS 残高の最小値, AVG(残高) AS 残高平均値, COUNT(*) AS 件数
  FROM 口座
 GROUP BY SUBSTRING(COALESCE(更新日, 'XXXX'), 1, 4);
# 57. 口座テーブルから、種別ごとの残高の合計とデータ件数を求める。
# ただし、合計が 300 万円以下のものは一覧から取り除く
SELECT 種別, SUM(残高) AS 残高の合計, COUNT(*) AS 件数
  FROM 口座
 GROUP BY 種別
 HAVING SUM(残高) >= 3000000;
# 58. 口座テーブルから、名義の一文字が同じグループごとに、データ件数と名義文字数の平均を求める
# ただし、件数が 10 件以上、または文字数平均が 5 以上のものを抽出対象とする
# また、名義の全角スペースは文字数に含めない
SELECT SUBSTRING(名義, 1, 1) AS 名義, COUNT(名義) AS 件数, AVG(CHAR_LENGTH(REPLACE(名義, '　', ''))) AS 文字数の平均
  FROM 口座
 GROUP BY SUBSTRING(名義, 1, 1)
HAVING COUNT(名義) >= 10 OR AVG(CHAR_LENGTH(REPLACE(名義, '　', ''))) > 5;
# 59. 次の口座について、取引日の取引結果を口座テーブルの残高に反映する。
# 更新には、SET 句にて取引テーブルを副問合せする UPDATE 文を用いること
# 口座番号: 0351333, 取引日: 2022-01-11
UPDATE 口座
   SET 残高 = 残高 + (SELECT COALESCE(SUM(入金額), 0) - COALESCE(SUM(出金額), 0)
                      FROM 取引
                     WHERE 取引.口座番号 = '0351333' AND 取引.日付 = '2022-01-11'),
       更新日 = '2022-01-11'
 WHERE 口座番号 = '0351333';
# 60. 次の講座について、現在の残高と、取引日に発生した取引による入出金額それぞれの合計金額を取得する
# 取得には、選択列リストにて取引テーブルを副問合せする SELECT 文を用いること
# - 口座番号: 1115600、取引日: '2021-12-28'
SELECT 残高,
       (SELECT SUM(入金額)
          FROM 取引
         WHERE 口座番号 = '1115600' AND 日付 = '2021-12-28') AS 入金額合計,
       (SELECT SUM(出金額)
          FROM 取引
         WHERE 口座番号 = '1115600' AND 日付 = '2021-12-28') AS 出金額合計
  FROM 口座
 WHERE 口座番号 = '1115600';
# 61. これまで 1 回の取引で 100 万円以上の入金があった口座について、口座番号、名義、残高を取得する
# ただし、WHERE 句で IN 演算子を利用した副問合せを用いること
SELECT 口座番号, 名義, 残高
  FROM 口座
 WHERE 口座番号 IN(SELECT DISTINCT 口座番号
                    FROM 取引
                   WHERE 入金額 >= 1000000);
# 62. 取引テーブルの日付よりも未来の更新日を持つ口座テーブルのデータを抽出する
# ただし、WHERE 句で ALL 演算子を利用した副問合せを用いること
SELECT *
  FROM 口座
 WHERE 更新日 > ALL(SELECT 日付 FROM 取引);
# 63. 次の口座について、入金と出金の両方が発生した日付を抽出する
# また、これまでの入金と出金それぞれの最大金額も合わせて抽出する。FROM 句で副問合せを用いること
# 口座番号: 3104451
SELECT A.日付,
       (SELECT MAX(入金額) FROM 取引 WHERE 口座番号 = '3104451') AS 最大入金額,
       (SELECT MAX(出金額) FROM 取引 WHERE 口座番号 = '3104451') AS 最大出金額
  FROM (SELECT 日付
          FROM 取引
         WHERE 口座番号 = '3104451'
         GROUP BY 日付
        HAVING SUM(入金額) > 0 AND SUM(出金額) > 0) AS A;
# 64. 次の講座について解約の申し出があった。副問合せを使って口座テーブルから廃止口座テーブルにデータを登録する
# また、口座テーブルのデータを削除する。なお、データの整合性は考慮しなくて良い
# 口座番号: 2761055
INSERT INTO 廃止口座 (SELECT * FROM 口座 WHERE 口座番号 = '2761055');
DELETE FROM 口座 WHERE 口座番号 = '2761055';