use intro_sql;

SELECT * FROM 商品;
SELECT * FROM 廃番商品;
SELECT * FROM 注文;

# 1. 商品テーブルの全てのデータを * を使わずに抽出する
SELECT 商品コード, 商品名, 単価, 商品区分, 関連商品コード FROM 商品;

# 2. 商品テーブルの全ての商品名を抽出する
SELECT DISTINCT 商品名 FROM 商品;

# 3. 注文テーブルの全てのデータを * を用いて抽出する
SELECT * FROM 注文;

# 4. 注文テーブルの全ての注文番号、注文枝番、商品コードを抽出する
SELECT 注文番号, 注文枝番, 商品コード FROM 注文;

# 5. 商品テーブルに次のデータを 1 回の実行ごとに 1 つづつ追加する
INSERT INTO 商品 (商品コード, 商品名, 単価, 商品区分)
VALUES ('W0461', '冬のあったかコート', 12800, '1');
INSERT INTO 商品 (商品コード, 商品名, 単価, 商品区分)
VALUES ('S0331', '春のさわやかコート', 6800, '1');
INSERT INTO 商品 (商品コード, 商品名, 単価, 商品区分)
VALUES ('A0582', '秋のシックなコート', 9800, '1');

# 第 3 章 操作する行の絞り込み
# 6. 商品テーブルから、商品コードが 'W1252' のデータを抽出する
SELECT *
  FROM 商品
 WHERE 商品コード = 'W1252';

# 7. 商品コードが 'S0023' の商品について、商品テーブルの単価を 500 円に変更する
UPDATE 商品
   SET 単価 = '500'
 WHERE 商品コード = 'S0023';

# 8. 商品テーブルから、単価が千円以下の商品データを抽出する
SELECT *
  FROM 商品
 WHERE 単価 <= 1000;

# 9. 商品テーブルから、単価が 5 万円以上の商品データを抽出する
SELECT *
  FROM 商品
 WHERE 単価 >= 50000;

# 10. 注文テーブルから、2022 年以降の注文データを抽出する
SELECT *
  FROM 注文
 WHERE 注文日 >= '2022-01-01';

# 11. 注文テーブルから、2021 年 11 月以前の注文データを抽出する
SELECT *
  FROM 注文
 WHERE 注文日 < '2022-12-01';

# 12. 商品テーブルから、'衣類' ではない商品データを抽出する
SELECT *
  FROM 商品
 WHERE 商品区分 <> '1';

# 13. 注文テーブルから、クーポン割引を利用していない注文データを抽出する
SELECT *
  FROM 注文
 WHERE クーポン割引料 IS NULL;

# 14. 商品テーブルから、商品コードが 'N' で始まる商品を削除する
DELETE FROM 商品
 WHERE 商品コード LIKE 'N%';

# 15. 商品テーブルから、商品名に 'コート' が含まれる商品について、商品コード、商品名、単価を抽出する
SELECT 商品コード, 商品名, 単価
  FROM 商品
 WHERE 商品名 LIKE '%コート%';

# 16. '靴' または '雑貨' もしくは '未分類' の商品について、商品コード、商品区分を抽出する
# ただし、記述する条件式は 1 つである
SELECT 商品コード, 商品区分
  FROM 商品
 WHERE 商品区分 IN ('2', '3', '9');

# 17. 商品テーブルから、商品コードが 'A0100' ~ 'A0500' に当てはまる商品データを抽出する。条件式は 1 つであること
SELECT *
  FROM 商品
 WHERE 商品コード BETWEEN 'A0100' AND 'A0500';

# 18. 注文テーブルから、商品コードが 'N0501' / 'N1021' / 'N0223' のいずれかを注文した注文データを抽出する
SELECT *
  FROM 注文
 WHERE 商品コード IN ('N0501', 'N1021', 'N0223');

# 19. 商品テーブルから、'雑貨' で商品名に '水玉' が含まれる商品データを抽出する
SELECT *
  FROM 商品
 WHERE 商品区分 = '3' AND 商品名 LIKE '%水玉%';

# 20. 商品テーブルから、商品名に '軽い' または 'ゆるふわ' のどちらかが含まれる商品データを抽出する
SELECT *
  FROM 商品
 WHERE 商品名 LIKE '%軽い%' OR 商品名 LIKE '%ゆるふわ%';

# 21. 商品テーブルから、'衣類' で単価が 3 千円以下、または '雑貨' で単価が1万円以上の商品データを抽出する
SELECT *
  FROM 商品
 WHERE (商品区分 = '1' AND 単価 <= 3000)
    OR (商品区分 = '3' AND 単価 >= 10000);

# 22. 注文テーブルから、2022 年 3 月中に、一度の注文で数量 3 個以上の注文があった商品コードを抽出する
SELECT 商品コード
  FROM 注文
 WHERE 注文日 BETWEEN '2022-03-01' AND '2022-03-31'
   AND 数量 >= 3;
# 別解
SELECT 商品コード
  FROM 注文
 WHERE 注文日 >= '2022-03-01'
   AND 注文日 <= '2022-03-31'
   AND 数量 >= 3;

# 23. 注文テーブルから、一度の注文で数量 10 個以上を注文したか、クーポン割引を利用した注文データを抽出する
SELECT *
  FROM 注文
 WHERE 数量 >= 10
    OR クーポン割引料 IS NOT NULL;

# 第 4 章 検索結果の加工
# 25. 商品区分 '衣類' の商品について、商品コードの降順に商品コードと商品名の一覧を取得する
SELECT 商品コード, 商品名
  FROM 商品
 WHERE 商品区分 = '1'
 ORDER BY 商品コード DESC;

# 26. 注文テーブルから、主キーの昇順に 2022 年 3 月以降の注文一覧を取得する。
# 取得する項目は、注文日 / 注文番号 / 注文枝番 / 商品コード / 数量とする
SELECT 注文日, 注文番号, 注文枝番, 商品コード, 数量
  FROM 注文
 WHERE 注文日 >= '2022-03-01'
 ORDER BY 注文日, 注文番号, 注文枝番;

# 27. 注文テーブルから、これまでに注文のあった商品コードを抽出する。重複は除外し、商品コードの昇順に抽出すること
SELECT DISTINCT 商品コード
  FROM 注文
 ORDER BY 商品コード;

# 28. 注文テーブルから、注文のあった日付を新しい順に 10 行抽出する(同一日付が複数回登場しても良い)
SELECT 注文日
  FROM 注文
 ORDER BY 注文日 DESC
 LIMIT 10;
# MySQL 以外
SELECT 注文日
  FROM 注文
 ORDER BY 注文日 DESC
 OFFSET 0 FETCH FIRST 10 ROWS ONLY;

# 29. 商品テーブルから、単価の低い順に並べて 6 ~ 20 行目に当たる商品データを抽出する
# 同一の単価の場合は、商品区分、商品コードの昇順に並ぶようにする
SELECT *
  FROM 商品
 ORDER BY 単価, 商品区分, 商品コード
 LIMIT 15 OFFSET 5;

# 30. 廃盤商品テーブルから、2020 / 12 に廃盤されたものと、売上個数が 100 を超えるものを併せて抽出する
# 一覧は、売上個数の多い順に並べること
SELECT *
  FROM 廃番商品
 WHERE (廃番日 >= '2020-12-01' AND 廃番日 <= '2020-12-31')
    OR 売上個数 >= 100
 ORDER BY 売上個数 DESC;
# 別解
SELECT *
  FROM 廃番商品
 WHERE (廃番日 >= '2020-12-01' AND 廃番日 <= '2020-12-31')
UNION
SELECT *
  FROM 廃番商品
 WHERE 売上個数 >= 100
 ORDER BY 売上個数 DESC;

# 31. 商品テーブルから、これまでに注文されたことのない商品コードを昇順に抽出する
SELECT 商品コード
  FROM 商品
 WHERE 商品コード NOT IN(SELECT DISTINCT 商品コード FROM 注文)
 ORDER BY 商品コード;
# 別解 LEFT JOIN + IS NULL
SELECT S.商品コード
  FROM 商品 AS S
  LEFT JOIN 注文 AS C
    ON C.商品コード = S.商品コード
 WHERE C.商品コード IS NULL
 ORDER BY S.商品コード;
# 別解 EXCEPT が利用可能な場合
SELECT 商品コード
  FROM 商品
EXCEPT
SELECT 商品コード
  FROM 注文
 ORDER BY 1;

# 32. 商品テーブルから、これまでに注文された実績のある商品コードを降順に抽出する
SELECT 商品コード
  FROM 商品
 WHERE 商品コード IN (SELECT DISTINCT 商品コード FROM 注文)
 ORDER BY 商品コード DESC;

# 33. 商品区分が '未分類' で、単価が千円以下と 1 万円を超える商品について、商品コード、商品名、単価を抽出する
# 単価の低い順に並べ、同額の場合は商品コードの昇順とする
SELECT 商品コード, 商品名, 単価
  FROM 商品
 WHERE 商品区分 = '9'
   AND (単価 <= 1000 OR 単価 >= 10000)
 ORDER BY 単価, 商品コード;

# 第 5 章 式と関数
# 34. 商品テーブルの商品区分 '未分類' の商品について、商品コード、単価、キャンペーン価格の一覧を取得する
# キャンペーン価格は単価の 5% 引きであり、1 円未満の端数は考慮しない
# 一覧は商品コード順に並べること
SELECT 商品コード, 単価, 単価 * 0.95 AS キャンペーン価格
  FROM 商品
 WHERE 商品区分 = '9'
 ORDER BY 商品コード;

# 35. 注文日が 2022-03-12 から 2022-03-14 で、同じ商品を 2 個以上注文し、既にクーポン割引を利用している注文について、
# さらに 300 円割引をすることになった。該当データのクーポン割引料を更新する
UPDATE 注文
   SET クーポン割引料 = クーポン割引料 + 300
 WHERE 注文日 >= '2022-03-12' AND 注文日 <= '2022-03-14'
   AND 数量 >= 2
   AND クーポン割引料 IS NOT NULL;

# 36. 注文番号 '202202250126' について、商品コード 'W0156' の注文数を 1 つ減らすよう更新する
UPDATE 注文
   SET 数量 = 数量 - 1
 WHERE 注文番号 = '202202250126'
   AND 商品コード = 'W0156';

# 37. 注文テーブルから、注文番号 '202110010001' ~ '202110319999' の注文データを抽出する
# 注文番号と枝番は - でつなげて一つの項目として抽出する
SELECT CONCAT(注文番号, '-', 注文枝番)
  FROM 注文
 WHERE 注文番号 BETWEEN '202110010001' AND '202110319999';

# 38. 商品テーブルから、商品区分の一覧を取得する。見出しは '区分' と '区分名' とし、区分名には日本語名を表記する
SELECT 商品区分 AS 区分,
  CASE
    WHEN 商品区分 = '1' THEN '衣類'
    WHEN 商品区分 = '2' THEN '靴'
    WHEN 商品区分 = '3' THEN '雑貨'
    WHEN 商品区分 = '9' THEN '未分類'
  END AS 区分名
  FROM 商品
 GROUP BY 商品区分;

# 39. 商品テーブルから、商品コード、商品名、単価、販売価格ランク、商品区分を抽出する
# 販売価格ランクは、3 前円未満 を 'S'、3 千円以上 1 万円未満 を 'M'、1万円以上を 'L' とする
# また、商品区分はコードと日本語名を ':' で連結して表示する
# 一覧は、単価の昇順に並べ、同額の場合は商品コードの昇順に並べること
SELECT 商品コード, 商品名, 単価, 
       CASE
	     WHEN 単価 < 3000 THEN 'S'
	     WHEN 単価 >= 3000 AND 単価 < 10000 THEN 'M'
	     WHEN 単価 >= 10000 THEN 'L'
       END AS 販売価格ランク,
       CONCAT(商品区分, ':',
         CASE
           WHEN 商品区分 = '1' THEN '衣類'
           WHEN 商品区分 = '2' THEN '靴'
           WHEN 商品区分 = '3' THEN '雑貨'
           WHEN 商品区分 = '9' THEN '未分類'
         END
       ) AS 区分名
  FROM 商品
 ORDER BY 単価, 商品コード;
 
# 40. 商品テーブルから、商品名が 10 文字を超過する商品名とその文字数を抽出する。文字数の昇順に並べること
SELECT 商品名, CHAR_LENGTH(商品名) AS 文字数
  FROM 商品
 WHERE CHAR_LENGTH(商品名) > 10
 ORDER BY CHAR_LENGTH(商品名);

# 41. 注文テーブルから、注文日と注文番号の一覧を抽出する。注文番号は日付の部分を取り除き、4 桁の連番部分を表記すること
SELECT 注文日,
       SUBSTRING(注文番号, 9, 4) AS 注文番号
  FROM 注文;

# 42. 商品テーブルについて、商品コードの 1 文字目が 'M' の商品の商品コードを 'E' で始まるよう更新する
UPDATE 商品
   SET 商品コード = CONCAT('E', SUBSTRING(商品コード, 2, 4))
 WHERE SUBSTRING(商品コード, 1, 1) = 'M';

# 43. 注文番号の連結部分が '1000' ~ '2000' の注文番号を抽出する。連番部分 4 桁を昇順で抽出すること
SELECT SUBSTRING(注文番号, 9, 4) AS 連結部分
  FROM 注文
 WHERE SUBSTRING(注文番号, 9, 4) >= '1000'
   AND SUBSTRING(注文番号, 9, 4) <= '2000'
 ORDER BY SUBSTRING(注文番号, 9, 4);

# 44. 商品コード 'S1990' の廃番日を、関数を使って本日の日付に修正する
UPDATE 廃番商品
   SET 廃番日 = CURDATE()
 WHERE 商品コード = 'S1990';

# 45. 1 万円以上の商品一覧を取得する。ただし、30% 値下げした時の単価を、商品コード、商品名、現在の単価と併せて取得する
# 値下げ後の単価の見出しは、'値下げした単価' とし、1 円未満は切り捨てる
SELECT 商品コード, 商品名, 単価,
  TRUNCATE(単価 * 0.7, 0) AS 値下げした単価
  FROM 商品
 WHERE 単価 >= 10000;

# 第 6 章 集計とグループ化
# 46. これまでに注文された数量の合計を求める
SELECT SUM(数量) AS 数量合計 FROM 注文;

# 47. 注文日順に、注文日ごとの数量の合計を求める
SELECT 注文日, SUM(数量) AS 数量合計
  FROM 注文
 GROUP BY 注文日
 ORDER BY 注文日;

# 48. 商品区分順に、商品区分ごとの単位の最小額と最高額を求める
SELECT 商品区分, MIN(単価) AS 最小額, MAX(単価) AS 最高額
  FROM 商品
 GROUP BY 商品区分
 ORDER BY 商品区分;

# 49. 商品コードごとに、これまで注文された数量の合計を商品コード順に求める
SELECT 商品コード, SUM(数量) AS 注文合計
  FROM 注文
 GROUP BY 商品コード
 ORDER BY 商品コード;

# 50. これまでに最もよく売れた商品を 10 位まで抽出する。商品コードと販売した数量を数量の多い順に並べ、数量が同じ場合は商品コードの昇順で並べる
SELECT 商品コード, SUM(数量) AS 数量合計
  FROM 注文
 GROUP BY 商品コード
 ORDER BY 数量合計 DESC, 商品コード
 LIMIT 10;

# 51. これまでに売れた数量が 5 未満の商品コードとその数量を抽出する
SELECT 商品コード, SUM(数量) AS 数量合計
  FROM 注文
 GROUP BY 商品コード
HAVING SUM(数量) < 5;

# 52. これまでにクーポン割引をした注文件数と、割引額の合計を求める。ただし、WHERE 句による絞り込み条件は指定しない
SELECT COUNT(クーポン割引料) AS 割引件数, SUM(クーポン割引料) AS 割引額合計
  FROM 注文;

# 53. 月ごとの注文件数を求める。抽出列の名前は '年月' と '注文件数' とし、年月列の内容は '202201' のような形式で、日付の新しい順で抽出する
# なお、1 件の注文には、必ず注文枝番 '1' の注文明細が含まれている事が保証されている
SELECT SUBSTRING(注文番号, 1, 6) AS 年月, COUNT(*) AS 注文件数
  FROM 注文
 WHERE 注文枝番 = '1'
 GROUP BY 年月
 ORDER BY 年月 DESC;

# 54. 注文テーブルから、'Z' から始まる商品コードのうち、これまでに売れた数量が 100 個以上の商品コードを抽出する
SELECT 商品コード, SUM(数量)
  FROM 注文
 WHERE 商品コード LIKE 'Z%'
 GROUP BY 商品コード
HAVING SUM(数量) >= 100;